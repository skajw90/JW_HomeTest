using HealthCatalystHomeTest.Models;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Http;

// main controller to connect with server and database
namespace HealthCatalystHomeTest.Controllers
{
    [RoutePrefix("main")]
    public class SearchController : ApiController
    {                  
        /// <summary>
        /// get data list by input name
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("search/{name}")]
        public List<User> Search(string name)
        {
            
            using (HealthCatalystDBEntities db = new HealthCatalystDBEntities())
            {
                return db.Users.Where(x => x.LastName == name || x.FirstName == name).ToList();         
            }
        }
        
        [HttpPost]
        [Route("add")]
        public void Add([FromBody]User user)
        {
            using (HealthCatalystDBEntities db = new HealthCatalystDBEntities())
            {
                db.Users.Add(user);
                db.SaveChanges();
            }
            
        }

        private byte[] FileToByteConverter(HttpPostedFile image)
        {
            byte[] result = new byte[image.ContentLength];

            using (Stream stream = image.InputStream)
            {
                stream.Read(result, 0, image.ContentLength);

                return result;
            }           
        }

        /// <summary>
        /// clear all data in DB
        /// </summary>
        /// <returns></returns>
        [HttpDelete]
        [Route("clear")]
        public void Clear()
        {
            using (HealthCatalystDBEntities db = new HealthCatalystDBEntities())
            {               
                var all = from c in db.Users select c;                
                db.Users.RemoveRange(all);
                db.SaveChanges();
            }
        }

        /// <summary>
        /// auto generate DB data set
        /// </summary>
        [HttpPost]
        [Route("autogen")]
        public void AutoGenerateDB()
        {
            using (HealthCatalystDBEntities db = new HealthCatalystDBEntities())
            {
                foreach(User user in AutoGenerateUser())
                {
                    db.Users.Add(user);                 
                }
               db.SaveChanges();
            }
        }

        /// <summary>
        /// helper method to make general form of string
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        private string FirstCharUpperForm(string s)
        {
            if (s.Length == 0)
                throw new Exception("Data is empty");

            string result = "";
            int isnumber;
            if (int.TryParse(s.First().ToString(), out isnumber))
                return s;
            else if (s.Length > 1)
                result = s.First().ToString().ToUpper() + s.Substring(1, s.Length - 1);
            else
                result = s.ToUpper();

            return result;
        }

        /// <summary>
        /// private method to add single user
        /// </summary>
        /// <param name="lastname"></param>
        /// <param name="firstname"></param>
        /// <param name="age"></param>
        /// <param name="interests"></param>
        /// <param name="image"></param>
        /// <returns></returns>
        private User AddSingleUser(string lastname, string firstname, int age, string interests, Image image)
        {
            byte[] arr;
            using (MemoryStream ms = new MemoryStream())
            {
                image.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                arr = ms.ToArray();

                return new User
                {
                    LastName = lastname,
                    FirstName = firstname,
                    Age = age,
                    Interests = interests,
                    Image = arr
                };
            }
        }
        /// <summary>
        /// helper method to generate users
        /// </summary>
        /// <returns></returns>
        private IEnumerable<User> AutoGenerateUser()
        {
            List<User> users = new List<User>();

            string[] lastnames = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "LastNameExamples.txt");

            string[] firstnames = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "FirstNameExamples.txt");

            string[] interests = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "InterestsExamples.txt");

            string[] ages = File.ReadAllLines(AppDomain.CurrentDomain.BaseDirectory + "AgeExample.txt");

            List<byte[]> images = new List<byte[]>();       

            for(int i = 0; i < 31; i++)
            {
                Image temp = Image.FromFile(AppDomain.CurrentDomain.BaseDirectory + "ExamplePictures\\image" + (i % 5 + 1) + ".png");
                byte[] arr;
                using (MemoryStream ms = new MemoryStream())
                {
                    temp.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                    arr = ms.ToArray();
                    images.Add(arr);
                }
            }
            

            for (int i = 0; i < 31; i++) {
                string lastname = lastnames[i];
                string firstname = firstnames[i];
                int age = int.Parse(ages[i]);
                string interest = interests[i];
                users.Add(new User()
                {
                    LastName = lastname,
                    FirstName = firstname,
                    Age = age,
                    Interests = interest,
                    Image = images[i]
                });                            
            }

            for (int i = 0; i < 31; i++)
            {
                string lastname = lastnames[i];
                string firstname = firstnames[30-i];
                int age = int.Parse(ages[i/2]);
                string interest = interests[(i*3)%30];
                users.Add(new User()
                {
                    LastName = lastname,
                    FirstName = firstname,
                    Age = age,
                    Interests = interest,
                    Image = images[30-i]
                });
            }

            return users;
        }
    }
}
